<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<style type="text/css">
body {
    background-color: #ffecfd;
    font-family: verdana, arial, helvetica, sans-serif;
    font-size: 9pt;
}
.code {
    background-color: #D4D0C8;
    font-family: courier;
    font-size: 9pt;
}
h1, h2, h3 {
text-decoration: underline overline;
}
</style>
<title>dbpro exe format information</title>
</head>
<body>
<h1>Dbpro exe format information</h1>
<p>v0.3 - 15 Jan 2006</p>
<p>Information based on exes produced by dbpro 5.9.</p>
<p>Darkbasic professional exes consist of a standard win32 exe with files and data appended onto the end. When the dbpro exe is run it creates a %TEMP%\dbpdata
directory and extracts the appended files into it.<br />
The extracted files consist of dbpro dlls, plugin dlls, attached media and the _virtual.dat file. The _virtual.dat file contains among other things
the compiled dbpro code.</p>
<h2>Standard win32 exe</h2>
<p>The start of a dbpro exe is a standard win32 exe. The exe section of all dbpro exes compiled with the same dbpro version appear to be very similar for
all compiled programs. The only time this section appears to differ is when you modify the exe icon or version information.<br />
The most reliable method to find the size of this section is to use some knowledge of the windows exe format to find the size of the exe.
<a href="http://wotsit.org">Wotsit.org</a> has several documents that describe the windows exe format.<br />
Here is a simple dbpro function returns the size in bytes of an exe section of a dbpro exe.<br />
<pre class="code">
function get_exe_size(fileName as string)
    `Returns the size in bytes of an exe section of a dbpro exe
    file_num = 1
    open to read file_num, fileName 
        skip bytes file_num, 60
        read long file_num, e_lfanew
    close file file_num
    open to read file_num, fileName
        skip bytes file_num, e_lfanew + 6
        read word file_num, numberOfSections
        skip bytes file_num, 240
        for i = 1 to numberOfSections
            skip bytes file_num, 16
            read long file_num, size
            read long file_num, pos
            skip bytes file_num, 16
        next i
    close file file_num
    inc size, pos
endfunction size
</pre>
Dbpro appears to not use such a method but instead hardcodes the size of the exe section. This means that if you alter the exe section in anyway
that causes its filesize to increase the exe will no longer work. Any modifications that make the exe smaller can be fixed by padding the file
with nulls until it is the correct size.
</p>
<h2>Attached files</h2>
<p>Now that we know the size of the exe section we can skip it to get straight to the appended data. The format used to append the files
is very simple and easy to read.<br />
Files are stored with a filename first then the filedata. Both the filename and filedata are preceded with a 4byte int which tells you how
long the filename or filedata is.</p>
<pre class="code">
int namelength
name
int datalength
data
</pre>
<p>Continue reading files while namelength is > 0 and < 50 or you reach the end of the file.</p>
<p>Some dbpro code that lists the files in an exe, requires the get_exe_size function above.</p>
<pre class="code">
sync on : sync
exeFile as string
exeFile = "temp.exe"
exeFileSize = file size(exeFile)
exeSize = get_exe_size(exeFile)
text 0, y, "exe section"
text 250, y, str$(exesize)
inc y,15
open to read 1, exeFile
    skip bytes 1, exeSize : `skip exe section
    namesize = 1
    repeat
        name$ = ""
        read long 1, namesize
        if namesize > 0 and namesize < 50
            for i = 1 to namesize
                read byte 1, b
                name$ = name$ + chr$(b)
            next i
            read long 1, datasize
            skip bytes 1, datasize
            text 0, y, name$
            text 250, y, str$(datasize)
            inc y, 15
        endif
    until namesize = 0 or namesize > 50
    `check for extra data
    if file end(1) = 0
        datasize = 4  : `namesize was read earlier so start at 4 so those 4 bytes are counted
        repeat
            read byte 1, b
            if file end(1) = 0 then inc datasize
        until file end(1)
        text 0, y, "extra data"
        text 250, y, str$(datasize)
    endif
close file 1
sync
wait key
</pre>
<p>Intrestingly after the files there is 20 bytes of data, I have no idea what it is for but it appears to be identical for all dbpro exes compiled with a particular dbpro version.</p>
<h2>Variations</h2>
<p>The above code will only let you view the contents of a normal dbpro exe, through the options in the IDE you can instruct the compiler to
compile one of several different types of dbpro exe. For all of these types the standard exe section is identical. All types can also contain
attached media files. Any media files will have a "media\" prefix on the filename. The dbpro media loading commands automatically
check for attached media so you need to do to add media to an exe is append it to the exe. It is possible to change a compiled exe of one type
into any of the other types.<p>
<ol>
<li>Normal Executable - The default option and by far the most popular, this is the format discussed above.</li>
<li>Executable with .Pck file - Instead of being appended to the exe the files are placed into a .pck file.</li>
<li>Executable with compressed data - The files are compressed before being appended to the exe.</li>
</ol>
<h3>Normal Executable</h3>
<p>Almost all dbpro exes you find will be in this format as it's the default option and the most practical.</p>
<h3>Executable with .Pck file</h3>
<p>Instead of appending the files to the exe they are stored in a .pck file. The .pck file will have the same name as the program just
with a .pck extension. Files are stored in the .pck file in the same format as they are appended to the exe. Pck files for whatever reason do
not have the extra 20 bytes at the end. To identify this type of exe check for a pck file or see if the exe section is the same size
as the exe.</p>
<h3>Executable with compressed data</h3>
<p>With this format the attached files are compressed to reduce the size of the exe. Exes in this format consist of the standard exe section
followed by compress.dll and then the compressed data. Compress.dll is used by the exe section to decompress the compressed data and is attached
to the exe in the usual manor. To identify this type of exe check to see if the first attached file is compress.dll instead of _virtual.dat. The
compression used is not terribly good and quite slow so these exes are rare.<br />
</p>
<h2>_virtual.dat</h2>
<p>Other than the standard exe section which changes when you use a different icon or version information _virtual.dat is the only file
that differs between dbpro exes. You can therefore conclude the compiled code and other settings are stored in the _virtual.dat file.</p>
<p>At the very start of the file are 4 4byte integers. These four ints contain the settings for the initial display mode in this order.</p>
<pre class="code">
windowMode
displayWidth
displayHeight
displayDepth
</pre>
<p>The values of the width, height and depth are obvious, the displayMode values are as follows.</p>
<pre class="code">
0 = hidden
1 = windowed
2 = windowed desktop
3 = full exclusive
4 = windowed fullscreen
</pre>
<p>By modifing these 4 ints it's possible to change the initial display mode of a compiled exe. Unfortunatly lots of people for some reason ignore
the display mode settings in the IDE and use SET DISPLAY MODE in their code instead. Setting the initial display mode will then not change the
display mode, however you can set the initial display mode to the same as the mode used by SET DISPLAY MODE, sometimes this can reduce
monitor flickering when the exe starts.</p>
<p>After the display settings is a null terminated string that is used as the window caption. Changing this string is easy if the replacment
text is the same length, just swap the characters for the new ones. It is also easy to replace with a shorter string, just swap the characters
and add a null character at the end. Leave the extra characters from the original string in place so the _virtual.dat file remains the same
length. Sometimes it is even possible to replace it with a longer string, just overwrite the data following the original string.</p>
<h2>Usefull links</h2>
<p><a href="http://dbp-unchained.tk/">Dbp unchained</a> - An unofficial collection of research, observations and commentary on the architecture
of DarkBASIC PRO software.</p>
</body>
</html>